<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习Liquibase</title>
      <link href="/posts/f7dc1405.html"/>
      <url>/posts/f7dc1405.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://global.discourse-cdn.com/business7/uploads/liquibase1/original/1X/d22b9ff3fb6422458a8c0de80248a3a68eadc8c6.jpeg" alt="Liquibase"></p><h1 id="初入Liquibase"><a href="#初入Liquibase" class="headerlink" title="初入Liquibase"></a>初入<a href="https://blog.csdn.net/weixin_41404773/article/details/106355563">Liquibase</a></h1><h3 id="一、与SpringBoot集成"><a href="#一、与SpringBoot集成" class="headerlink" title="一、与SpringBoot集成"></a>一、与SpringBoot集成</h3><h4 id="1、引入依赖："><a href="#1、引入依赖：" class="headerlink" title="1、引入依赖："></a>1、引入依赖：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Liquibase--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.liquibase&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2、配置LiquiBaseConfig"><a href="#2、配置LiquiBaseConfig" class="headerlink" title="2、配置LiquiBaseConfig"></a>2、配置LiquiBaseConfig</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class LiquibaseConfig &#123;</span><br><span class="line"> </span><br><span class="line">    @Bean</span><br><span class="line">    public SpringLiquibase liquibase(DataSource dataSource) &#123;</span><br><span class="line">        SpringLiquibase liquibase = new SpringLiquibase();</span><br><span class="line">        liquibase.setDataSource(dataSource);</span><br><span class="line">        //指定changelog的位置，这里使用的一个master文件引用其他文件的方式</span><br><span class="line">        liquibase.setChangeLog(&quot;classpath:liquibase/master.xml&quot;);</span><br><span class="line">        //liquibase.setContexts(&quot;development,test,production&quot;);</span><br><span class="line">        liquibase.setShouldRun(true);</span><br><span class="line">        return liquibase;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、xml文件中属性讲解："><a href="#3、xml文件中属性讲解：" class="headerlink" title="3、xml文件中属性讲解："></a>3、xml文件中属性讲解：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseChangeLog</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.liquibase.org/xml/ns/dbchangelog</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">       <span class="tag">&lt;<span class="name">changeSet</span> <span class="attr">id</span>=<span class="string">&quot;20190713-02&quot;</span> <span class="attr">author</span>=<span class="string">&quot;solo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">createTable</span> <span class="attr">tableName</span>=<span class="string">&quot;dh_project_category&quot;</span> <span class="attr">remarks</span>=<span class="string">&quot;项目类型表&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar(64)&quot;</span> <span class="attr">remarks</span>=<span class="string">&quot;项目类型id&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constraints</span> <span class="attr">primaryKey</span>=<span class="string">&quot;true&quot;</span> <span class="attr">nullable</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar(255)&quot;</span> <span class="attr">remarks</span>=<span class="string">&quot;类目类型名称&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;status&quot;</span> <span class="attr">type</span>=<span class="string">&quot;int(11)&quot;</span> <span class="attr">remarks</span>=<span class="string">&quot;状态。1正常，2删除&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;remark&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar(255)&quot;</span> <span class="attr">remarks</span>=<span class="string">&quot;备注&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">createTable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">changeSet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseChangeLog</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Id：唯一id       Author：修改人</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseChangeLog</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns</span>=<span class="string">&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.liquibase.org/xml/ns/dbchangelog</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1：includeAll 标签可以把一个文件夹下的所有 changelog 都加载进来。如果单个加载可以用 include。</span></span><br><span class="line"><span class="comment">    2：includeAll 标签里有两个属性：path 和 relativeToChangelogFile。</span></span><br><span class="line"><span class="comment">        2.1：path （在 include 标签里是 file）：指定要加载的文件或文件夹位置</span></span><br><span class="line"><span class="comment">        2.2：relativeToChangelogFile ：文件位置的路径是否相对于 root changelog 是相对路径，默认 false，即相对于               classpath 是相对路径。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">includeAll</span> <span class="attr">path</span>=<span class="string">&quot;liquibase/changelog/&quot;</span> <span class="attr">relativeToChangelogFile</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseChangeLog</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、基于liquibase对数据库的操作"><a href="#二、基于liquibase对数据库的操作" class="headerlink" title="二、基于liquibase对数据库的操作"></a>二、基于liquibase对数据库的操作</h3><h4 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">changeSet</span> <span class="attr">id</span>=<span class="string">&quot;20190713-01&quot;</span> <span class="attr">author</span>=<span class="string">&quot;solo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">createTable</span> <span class="attr">tableName</span>=<span class="string">&quot;project_info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;project_id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar(64)&quot;</span> <span class="attr">encoding</span>=<span class="string">&quot;utf8&quot;</span> <span class="attr">remarks</span>=<span class="string">&quot;项目id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constraints</span> <span class="attr">primaryKey</span>=<span class="string">&quot;true&quot;</span> <span class="attr">nullable</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;project_name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar(255)&quot;</span> <span class="attr">encoding</span>=<span class="string">&quot;utf8&quot;</span> <span class="attr">remarks</span>=<span class="string">&quot;项目名字&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">createTable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">changeSet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;<code>createTable</code>&gt;创建表标签   <code>tableName</code> 表名     </p><p>&lt;<code>column</code>&gt;  字段标签  <code>name</code>：字段名称  <code>type</code>：字段类型   <code>encoding</code>：编码类型  <code>remarks</code>：字段注释</p><p>&lt;<code>constraints</code>&gt;主键标签   <code>primaryKey</code>：是否主键   <code>Nullable</code>：是否为空</p><p>项目启动会自动在数据库生成<code>project_info</code>表</p><h4 id="2、修改表-添加列"><a href="#2、修改表-添加列" class="headerlink" title="2、修改表-添加列"></a>2、修改表-添加列</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">changeSet</span> <span class="attr">id</span>=<span class="string">&quot;20190713-01&quot;</span> <span class="attr">author</span>=<span class="string">&quot;yunshan&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">addColumn</span> <span class="attr">tableName</span>=<span class="string">&quot;project_info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;varchar(255)&quot;</span> <span class="attr">encoding</span>=<span class="string">&quot;utf8&quot;</span> <span class="attr">remarks</span>=<span class="string">&quot;地址&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">addColumn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">changeSet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;<code>addColumn</code>&gt;  <code>tableName</code> 修改表名</p><p>&lt;<code>column</code>&gt;  字段标签  ： <code>name</code>：字段名称    <code>type</code>：字段类型  </p><p>&#x3D;&#x3D;注&#x3D;&#x3D;：1：同一个文件中，<code>changeSet</code>中的id不能重复，</p><p>​        2： 每次数据库变更，都会在<code>databasechangelog</code>生成一条记录</p><h4 id="3、修改表-删除列"><a href="#3、修改表-删除列" class="headerlink" title="3、修改表-删除列"></a>3、修改表-删除列</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">changeSet</span> <span class="attr">id</span>=<span class="string">&quot;20190713-03&quot;</span> <span class="attr">author</span>=<span class="string">&quot;yunshan&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dropColumn</span> <span class="attr">tableName</span>=<span class="string">&quot;project_info&quot;</span> <span class="attr">columnName</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">changeSet</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、修改表-添加数据"><a href="#4、修改表-添加数据" class="headerlink" title="4、修改表-添加数据"></a>4、修改表-添加数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">changeSet</span> <span class="attr">id</span>=<span class="string">&quot;20190713-061&quot;</span> <span class="attr">author</span>=<span class="string">&quot;yunshan&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">tableName</span>=<span class="string">&quot;project_info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;project_id&quot;</span> <span class="attr">valueNumeric</span>=<span class="string">&quot;312223&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;project_status&quot;</span> <span class="attr">valueNumeric</span>=<span class="string">&quot;322434343&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;project_name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wkn&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">changeSet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;<code>inSert</code>&gt;   数据插入标签</p><p>   &lt;<code>column</code>&gt;  字段标签，<code>name</code>：字段名称   <code>valueNumeric</code>：对应的字符值</p><h4 id="5、修改表-通过sql脚本"><a href="#5、修改表-通过sql脚本" class="headerlink" title="5、修改表-通过sql脚本"></a>5、修改表-通过sql脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;changeSet id=&quot;20200522-02&quot; author=&quot;yunshan&quot;&gt;</span><br><span class="line">    &lt;sqlFile path=&quot;liquibase/sql/project_info.sql&quot;/&gt;</span><br><span class="line">&lt;/changeSet&gt;</span><br></pre></td></tr></table></figure><p>&lt;<code>sqlFile</code>&gt;标签，指定需要加载的sql路径 （相对路径）</p><h3 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h3><h4 id="liquibase：（实用小文章）"><a href="#liquibase：（实用小文章）" class="headerlink" title="liquibase：（实用小文章）"></a><a href="https://blog.csdn.net/u010227394/article/details/111186651"><code>liquibase</code></a>：（实用小文章）</h4><h5 id="1、将已有的字段进行类型的变更："><a href="#1、将已有的字段进行类型的变更：" class="headerlink" title="1、将已有的字段进行类型的变更："></a>1、将已有的字段进行类型的变更：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来的类型</span></span><br><span class="line">&lt;column name=<span class="string">&quot;unique_key&quot;</span> remarks=<span class="string">&quot;唯一标识&quot;</span> type=<span class="string">&quot;varchar(100)&quot;</span>&gt;</span><br><span class="line">&lt;constraints nullable=<span class="string">&quot;false&quot;</span> primaryKey=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">&lt;/column&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//变更的语句modifyDataType标签</span></span><br><span class="line">&lt;changeSet id=<span class="string">&quot;alter_customer_batch_20240914141700&quot;</span> author=<span class="string">&quot;songqi.xiao&quot;</span>&gt;</span><br><span class="line">&lt;modifyDataType tableName=<span class="string">&quot;bfs_customer_batch_info&quot;</span> columnName=<span class="string">&quot;unique_key&quot;</span> newDataType=<span class="string">&quot;int&quot;</span>/&gt;</span><br><span class="line">&lt;/changeSet&gt;</span><br></pre></td></tr></table></figure><h5 id="2、对已有的主键设置自增："><a href="#2、对已有的主键设置自增：" class="headerlink" title="2、对已有的主键设置自增："></a>2、对已有的主键设置自增：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标签addAutoIncrement</span></span><br><span class="line">&lt;changeSet author=<span class="string">&quot;songqi.xiao&quot;</span> id=<span class="string">&quot;addAutoIncrement_20240914145400&quot;</span>&gt;</span><br><span class="line">&lt;addAutoIncrement tableName=<span class="string">&quot;bfs_customer_batch_info&quot;</span> generationType=<span class="string">&quot;ALWAYS&quot;</span>  columnName=<span class="string">&quot;unique_key&quot;</span> columnDataType=<span class="string">&quot;int&quot;</span>  /&gt;</span><br><span class="line">&lt;/changeSet&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库管理 </category>
          
          <category> Liquibase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库管理 </tag>
            
            <tag> Liquibase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习lambda表达式</title>
      <link href="/posts/7473ed9b.html"/>
      <url>/posts/7473ed9b.html</url>
      
        <content type="html"><![CDATA[<p>Stream流操作讲解</p><h4 id="1-Stream概述"><a href="#1-Stream概述" class="headerlink" title="1 Stream概述"></a>1 Stream概述</h4><p>java 8 是一个非常成功的版本，这个版本新增的<code>Stream</code>，配合同版本出现的 <code>Lambda</code> ，给我们操作集合（Collection）提供了极大的便利。</p><p><strong>那么什么是Stream？</strong></p><p><code>Stream</code>将要处理的元素集合看作一种流，在流的过程中，借助Stream API对流中的元素进行操作，比如：筛选、排序、聚合等。</p><p><code>Stream</code>可以由数组或集合创建，对流的操作分为两种：</p><ol><li><p>中间操作，每次返回一个新的流，可以有多个。（筛选filter、映射map、排序sorted、去重组合skip—limit）</p></li><li><p>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。（遍历foreach、匹配find–match、规约reduce、聚合max–min–count、收集collect）</p></li></ol><p>另外，<code>Stream</code>有几个特性：</p><ol><li><p>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果。</p></li><li><p>stream不会改变数据源，通常情况下会产生一个新的集合或一个值。</p></li><li><p>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</p></li></ol><h4 id="2-Stream与传统遍历对比"><a href="#2-Stream与传统遍历对比" class="headerlink" title="2 Stream与传统遍历对比"></a>2 Stream与传统遍历对比</h4><p>几乎所有的集合（如 Collection 接口或 Map 接口等）都支持直接或间接的遍历操作。而当我们需要对集合中的元素进行操作的时候，除了必需的添加、删除、获取外，最典型的就是集合遍历。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1List</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;小昭&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;殷离&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        List&lt;String&gt; listA = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> ( String s  : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">                listA.add(s);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        List&lt;String&gt; listB = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s: listA) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.length() == <span class="number">3</span>)</span><br><span class="line">                listB.add(s);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (String s: listB) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>循环遍历的弊端  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Java 8的Lambda更加专注于做什么（What），而不是怎么做（How），这点此前已经结合内部类进行了对比说明。现在，仔细体会一下上例代码，可以发现：</span><br><span class="line"></span><br><span class="line">for循环的语法就是“怎么做”</span><br><span class="line"></span><br><span class="line">for循环的循环体才是“做什么”</span><br><span class="line"></span><br><span class="line">为什么使用循环？因为要进行遍历。但循环是遍历的唯一方式吗？遍历是指每一个元素逐一进行处理，而并不是从第一个到最后一个顺次处理的循环。前者是目的，后者是方式。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用Stream写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2Steam</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周芷若&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;小昭&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;殷离&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">                .filter(name -&gt; name.length() == <span class="number">3</span>)</span><br><span class="line">                .forEach(name -&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果显而易见。</p><p><strong>3 Stream的创建</strong><br><code>Stream</code>可以通过集合数组创建。</p><p>1、通过 <code>java.util.Collection.stream()</code> 方法用集合创建流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">// 创建一个顺序流</span></span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"><span class="comment">// 创建一个并行流</span></span><br><span class="line">Stream&lt;String&gt; parallelStream = list.parallelStream();</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/6dc7bfffc1a54297ad028e9f089e1dce.png#pic_center" alt="img"></p><p>2、使用<code>java.util.Arrays.stream(T[] array)</code>方法用数组创建流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(array);</span><br></pre></td></tr></table></figure><p>3、使用<code>Stream</code>的静态方法：<code>of()、iterate()、generate()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">3</span>).limit(<span class="number">4</span>);</span><br><span class="line">stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">3</span>);</span><br><span class="line">stream3.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b219650768dfddc127dbc8c4b3edea9b.png#pic_center" alt="在这里插入图片描述"></p><p><strong>stream和parallelStream的简单区分：</strong> <code>stream</code>是顺序流，由主线程按顺序对流执行操作，而<code>parallelStream</code>是并行流，内部以多线程并行执行的方式对流进行操作，但前提是流中的数据处理没有顺序要求。例如筛选集合中的奇数，两者的处理不同之处：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/99ff16fff2afeeb0893a969e76a7c5fe.png#pic_center" alt="在这里插入图片描述"></p><p>如果流中的数据量足够大，并行流可以加快处速度。</p><p>除了直接创建并行流，还可以通过<code>parallel()</code>把顺序流转换成并行流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; findFirst = list.stream().parallel().filter(x-&gt;x&gt;<span class="number">6</span>).findFirst();</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">4</span>);</span><br><span class="line">       Optional&lt;Integer&gt; findFirst = list.stream().parallel().filter(x-&gt;x&gt;<span class="number">6</span>).findFirst();</span><br><span class="line">       System.out.println(<span class="string">&quot;使用Stream的静态方法generate：&quot;</span> + findFirst.get());</span><br></pre></td></tr></table></figure><h4 id="4-Stream的使用"><a href="#4-Stream的使用" class="headerlink" title="4 Stream的使用"></a>4 Stream的使用</h4><p>在使用stream之前，先理解一个概念：<code>Optional</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional类是一个可以为<span class="literal">null</span>的容器对象。如果值存在则isPresent()方法会返回<span class="literal">true</span>，调用get()方法会返回该对象。</span><br><span class="line"></span><br><span class="line">Optional学习链接---------</span><br></pre></td></tr></table></figure><p>首先创建一个案例使用的员工类<code>Person</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;  <span class="comment">// 姓名</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> salary; <span class="comment">// 薪资</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line"><span class="keyword">private</span> String sex; <span class="comment">//性别</span></span><br><span class="line"><span class="keyword">private</span> String area;  <span class="comment">// 地区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> salary, <span class="type">int</span> age,String sex,String area)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.sex = sex;</span><br><span class="line"><span class="built_in">this</span>.area = area;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略了get和set，请自行添加</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-1-遍历-匹配（foreach、find、match）"><a href="#4-1-遍历-匹配（foreach、find、match）" class="headerlink" title="4.1 遍历&#x2F;匹配（foreach、find、match）"></a>4.1 遍历&#x2F;匹配（foreach、find、match）</h5><p><code>Stream</code>也是支持类似集合的遍历和匹配元素的，只是<code>Stream</code>中的元素是以<code>Optional</code>类型存在的。<code>Stream</code>的遍历、匹配非常简单。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/00390d5b69572293e30ed4283731b3f5.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// import已省略，请自行添加，后面代码亦是</span><br><span class="line"></span><br><span class="line">public class StreamTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       List&lt;Integer&gt; list = Arrays.asList(7, 6, 9, 3, 8, 2, 1);</span><br><span class="line"></span><br><span class="line">       // 遍历输出符合条件的元素</span><br><span class="line">       list.stream().filter(x -&gt; x &gt; 6).forEach(System.out::println);</span><br><span class="line">       // 匹配第一个</span><br><span class="line">       Optional&lt;Integer&gt; findFirst = list.stream().filter(x -&gt; x &gt; 6).findFirst();</span><br><span class="line">       // 匹配任意（适用于并行流）</span><br><span class="line">       Optional&lt;Integer&gt; findAny = list.parallelStream().filter(x -&gt; x &gt; 6).findAny();</span><br><span class="line">       // 是否包含符合特定条件的元素</span><br><span class="line">       boolean anyMatch = list.stream().anyMatch(x -&gt; x &gt; 6);</span><br><span class="line">       System.out.println(&quot;匹配第一个值：&quot; + findFirst.get());</span><br><span class="line">       System.out.println(&quot;匹配任意一个值：&quot; + findAny.get());</span><br><span class="line">       System.out.println(&quot;是否存在大于6的值：&quot; + anyMatch);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/1ad6e0ea5bea58fe5a9bb4b1185b377f.png#pic_center" alt="在这里插入图片描述"></p><h5 id="4-2-筛选（filter）"><a href="#4-2-筛选（filter）" class="headerlink" title="4.2 筛选（filter）"></a>4.2 筛选（filter）</h5><p>筛选，是按照一定的规则校验流中的元素，将符合条件的元素提取到新的流中的操作。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b85c0f6c8593fd83c8a7ab133c928b44.png#pic_center" alt="在这里插入图片描述"></p><p><strong>filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span>;</span><br></pre></td></tr></table></figure><p>案例一：筛选出Integer集合中大于7的元素，并打印出来**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">stream.filter(x -&gt; x &gt; <span class="number">7</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/5485ed913c893862e04220073f41d4ba.png#pic_center" alt="在这里插入图片描述"></p><p><strong>案例二： 筛选员工中工资高于8000的人，并形成新的集合。</strong> 形成新集合依赖<code>collect</code>（收集），后文有详细介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;();</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">8900</span>, <span class="number">23</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">7000</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Lily&quot;</span>, <span class="number">7800</span>, <span class="number">21</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;Washington&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Anni&quot;</span>, <span class="number">8200</span>, <span class="number">24</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Owen&quot;</span>, <span class="number">9500</span>, <span class="number">25</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line">personList.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alisa&quot;</span>, <span class="number">7900</span>, <span class="number">26</span>, <span class="string">&quot;female&quot;</span>, <span class="string">&quot;New York&quot;</span>));</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; fiterList = personList.stream().filter(x -&gt; x.getSalary() &gt; <span class="number">8000</span>).map(Person::getName)</span><br><span class="line">.collect(Collectors.toList());</span><br><span class="line">System.out.print(<span class="string">&quot;高于8000的员工姓名：&quot;</span> + fiterList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f265f5ff89d8cbf01389a50dd926de90.png#pic_center" alt="在这里插入图片描述"></p><p>4.3 聚合（max、min、count）<br>max、min、count这些一定不陌生，在mysql中我们常用它们进行数据统计。Java stream中也引入了这些概念和用法，极大地方便了我们对集合、数组的数据统计工作。</p><p>案例一：获取String集合中最长的元素。</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<String> list &#x3D; Arrays.asList(“adnm”, “admmt”, “pot”, “xbangd”, “weoujgsd”);</p><pre><code>    Optional&lt;String&gt; max = list.stream().max(Comparator.comparing(String::length));    System.out.println(&quot;最长的字符串：&quot; + max.get());&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>输出结果：</p><p>案例二：获取Integer集合中的最大值。</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Integer> list &#x3D; Arrays.asList(7, 6, 9, 4, 11, 6);</p><pre><code>    // 自然排序    Optional&lt;Integer&gt; max = list.stream().max(Integer::compareTo);    // 自定义排序    Optional&lt;Integer&gt; max2 = list.stream().max(new Comparator&lt;Integer&gt;() &#123;        @Override        public int compare(Integer o1, Integer o2) &#123;            return o1.compareTo(o2);        &#125;    &#125;);    System.out.println(&quot;自然排序的最大值：&quot; + max.get());    System.out.println(&quot;自定义排序的最大值：&quot; + max2.get());&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>输出结果：</p><p>案例三：获取员工工资最高的人。</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Person> personList &#x3D; new ArrayList<Person>();<br>        personList.add(new Person(“Tom”, 8900, 23, “male”, “New York”));<br>        personList.add(new Person(“Jack”, 7000, 25, “male”, “Washington”));<br>        personList.add(new Person(“Lily”, 7800, 21, “female”, “Washington”));<br>        personList.add(new Person(“Anni”, 8200, 24, “female”, “New York”));<br>        personList.add(new Person(“Owen”, 9500, 25, “male”, “New York”));<br>        personList.add(new Person(“Alisa”, 7900, 26, “female”, “New York”));</p><pre><code>    Optional&lt;Person&gt; max = personList.stream().max(Comparator.comparingInt(Person::getSalary));    System.out.println(&quot;员工工资最大值：&quot; + max.get().getSalary());&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>输出结果：</p><p>案例四：计算Integer集合中大于6的元素的个数。</p><p>import java.util.Arrays;<br>import java.util.List;</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Integer> list &#x3D; Arrays.asList(7, 6, 4, 8, 2, 11, 9);</p><pre><code>    long count = list.stream().filter(x -&gt; x &gt; 6).count();    System.out.println(&quot;list中大于6的元素个数：&quot; + count);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>输出结果：</p><p>4.4 映射（map、flatMap）<br>映射，可以将一个流的元素按照一定的映射规则映射到另一个流中。分为map和flatMap：</p><p>map：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。<br>flatMap：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</p><p>map</p><p><R> Stream<R> map(Function&lt;? super T, ? extends R&gt; mapper);<br>1<br>flatMap</p><p><R> Stream<R> flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);<br>1<br>案例一：英文字符串数组的元素全部改为大写。整数数组每个元素+3。**</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        String[] strArr &#x3D; { “abcd”, “bcdd”, “defde”, “fTr” };<br>        List<String> strList &#x3D; Arrays.stream(strArr).map(String::toUpperCase).collect(Collectors.toList());</p><pre><code>    List&lt;Integer&gt; intList = Arrays.asList(1, 3, 5, 7, 9, 11);    List&lt;Integer&gt; intListNew = intList.stream().map(x -&gt; x + 3).collect(Collectors.toList());    System.out.println(&quot;每个元素大写：&quot; + strList);    System.out.println(&quot;每个元素+3：&quot; + intListNew);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>输出结果：</p><p>案例二：将员工的薪资全部增加1000。</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Person> personList &#x3D; new ArrayList<Person>();<br>        personList.add(new Person(“Tom”, 8900, 23, “male”, “New York”));<br>        personList.add(new Person(“Jack”, 7000, 25, “male”, “Washington”));<br>        personList.add(new Person(“Lily”, 7800, 21, “female”, “Washington”));<br>        personList.add(new Person(“Anni”, 8200, 24, “female”, “New York”));<br>        personList.add(new Person(“Owen”, 9500, 25, “male”, “New York”));<br>        personList.add(new Person(“Alisa”, 7900, 26, “female”, “New York”));</p><pre><code>    // 不改变原来员工集合的方式    List&lt;Person&gt; personListNew = personList.stream().map(person -&gt; &#123;        Person personNew = new Person(person.getName(), 0, 0, null, null);        personNew.setSalary(person.getSalary() + 10000);        return personNew;    &#125;).collect(Collectors.toList());    System.out.println(&quot;一次改动前：&quot; + personList.get(0).getName() + &quot;--&gt;&quot; + personList.get(0).getSalary());    System.out.println(&quot;一次改动后：&quot; + personListNew.get(0).getName() + &quot;--&gt;&quot; + personListNew.get(0).getSalary());    // 改变原来员工集合的方式    List&lt;Person&gt; personListNew2 = personList.stream().map(person -&gt; &#123;        person.setSalary(person.getSalary() + 10000);        return person;    &#125;).collect(Collectors.toList());    System.out.println(&quot;二次改动前：&quot; + personList.get(0).getName() + &quot;--&gt;&quot; + personListNew.get(0).getSalary());    System.out.println(&quot;二次改动后：&quot; + personListNew2.get(0).getName() + &quot;--&gt;&quot; + personListNew.get(0).getSalary());&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>输出结果：</p><p>案例三：将两个字符数组合并成一个新的字符数组。</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<String> list &#x3D; Arrays.asList(“m,k,l,a”, “1,3,5,7”);<br>        List<String> listNew &#x3D; list.stream().flatMap(s -&gt; {<br>            &#x2F;&#x2F; 将每个元素转换成一个stream<br>            String[] split &#x3D; s.split(“,”);<br>            Stream<String> s2 &#x3D; Arrays.stream(split);<br>            return s2;<br>        }).collect(Collectors.toList());</p><pre><code>    System.out.println(&quot;处理前的集合：&quot; + list);    System.out.println(&quot;处理后的集合：&quot; + listNew);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>输出结果：</p><p>4.5 规约（reduce）<br>归约，也称缩减，顾名思义，是把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作。</p><p>reduce</p><pre><code> T reduce(T identity, BinaryOperator&lt;T&gt; accumulator); @Override</code></pre><p>   public final P_OUT reduce(final P_OUT identity, final BinaryOperator<P_OUT> accumulator) {<br>       return evaluate(ReduceOps.makeRef(identity, accumulator, accumulator));<br>   }</p><pre><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</code></pre><p>   @Override<br>   public final Optional<P_OUT> reduce(BinaryOperator<P_OUT> accumulator) {<br>       return evaluate(ReduceOps.makeRef(accumulator));<br>   }</p><p><U> U reduce(U identity,<br>                BiFunction&lt;U, ? super T, U&gt; accumulator,<br>                BinaryOperator<U> combiner);<br>   @Override<br>   public final <R> R reduce(R identity, BiFunction&lt;R, ? super P_OUT, R&gt; accumulator, BinaryOperator<R> combiner) {<br>       return evaluate(ReduceOps.makeRef(identity, accumulator, combiner));<br>   }</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>Optional reduce(BinaryOperator accumulator)：第一次执行时，accumulator函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素；依次类推。<br> T reduce(T identity, BinaryOperator accumulator)：流程跟上面一样，只是第一次执行时，accumulator函数的第一个参数为identity，而第二个参数为流中的第一个元素。</p><p>案例一：求Integer集合的元素之和、乘积和最大值。**</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Integer> list &#x3D; Arrays.asList(1, 3, 2, 8, 11, 4);<br>        &#x2F;&#x2F; 求和方式1<br>        Optional<Integer> sum &#x3D; list.stream().reduce((x, y) -&gt; x + y);<br>        &#x2F;&#x2F; 求和方式2<br>        Optional<Integer> sum2 &#x3D; list.stream().reduce(Integer::sum);<br>        &#x2F;&#x2F; 求和方式3<br>        Integer sum3 &#x3D; list.stream().reduce(0, Integer::sum);</p><pre><code>    // 求乘积    Optional&lt;Integer&gt; product = list.stream().reduce((x, y) -&gt; x * y);    // 求最大值方式1    Optional&lt;Integer&gt; max = list.stream().reduce((x, y) -&gt; x &gt; y ? x : y);    // 求最大值写法2    Integer max2 = list.stream().reduce(1, Integer::max);    System.out.println(&quot;list求和：&quot; + sum.get() + &quot;,&quot; + sum2.get() + &quot;,&quot; + sum3);    System.out.println(&quot;list求积：&quot; + product.get());    System.out.println(&quot;list求和：&quot; + max.get() + &quot;,&quot; + max2);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>输出结果</p><p>案例二：求所有员工的工资之和和最高工资。</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Person> personList &#x3D; new ArrayList<Person>();<br>        personList.add(new Person(“Tom”, 8900, 23, “male”, “New York”));<br>        personList.add(new Person(“Jack”, 7000, 25, “male”, “Washington”));<br>        personList.add(new Person(“Lily”, 7800, 21, “female”, “Washington”));<br>        personList.add(new Person(“Anni”, 8200, 24, “female”, “New York”));<br>        personList.add(new Person(“Owen”, 9500, 25, “male”, “New York”));<br>        personList.add(new Person(“Alisa”, 7900, 26, “female”, “New York”));</p><pre><code>    // 求工资之和方式1：    Optional&lt;Integer&gt; sumSalary = personList.stream().map(Person::getSalary).reduce(Integer::sum);    // 求工资之和方式2：    Integer sumSalary2 = personList.stream().reduce(0, (sum, p) -&gt; sum += p.getSalary(),            (sum1, sum2) -&gt; sum1 + sum2);    // 求工资之和方式3：    Integer sumSalary3 = personList.stream().reduce(0, (sum, p) -&gt; sum += p.getSalary(), Integer::sum);    // 求最高工资方式1：    Integer maxSalary = personList.stream().reduce(0, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(),            Integer::max);    // 求最高工资方式2：    Integer maxSalary2 = personList.stream().reduce(0, (max, p) -&gt; max &gt; p.getSalary() ? max : p.getSalary(),            (max1, max2) -&gt; max1 &gt; max2 ? max1 : max2);    System.out.println(&quot;工资之和：&quot; + sumSalary.get() + &quot;,&quot; + sumSalary2 + &quot;,&quot; + sumSalary3);    System.out.println(&quot;最高工资：&quot; + maxSalary + &quot;,&quot; + maxSalary2);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>输出结果：</p><p>4.6 收集（collect）<br>collect，收集，可以说是内容最繁多、功能最丰富的部分了。从字面上去理解，就是把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合。</p><p>collect主要依赖java.util.stream.Collectors类内置的静态方法。</p><p>4.6.1 归集（toList、toSet、toMap）<br>因为流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里。toList、toSet和toMap比较常用，另外还有toCollection、toConcurrentMap等复杂一些的用法。</p><p>下面用一个案例演示toList、toSet和toMap：</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Integer> list &#x3D; Arrays.asList(1, 6, 3, 4, 6, 7, 9, 6, 20);<br>        List<Integer> listNew &#x3D; list.stream().filter(x -&gt; x % 2 &#x3D;&#x3D; 0).collect(Collectors.toList());<br>        Set<Integer> set &#x3D; list.stream().filter(x -&gt; x % 2 &#x3D;&#x3D; 0).collect(Collectors.toSet());</p><pre><code>    List&lt;Person&gt; personList = new ArrayList&lt;Person&gt;();    personList.add(new Person(&quot;Tom&quot;, 8900, 23, &quot;male&quot;, &quot;New York&quot;));    personList.add(new Person(&quot;Jack&quot;, 7000, 25, &quot;male&quot;, &quot;Washington&quot;));    personList.add(new Person(&quot;Lily&quot;, 7800, 21, &quot;female&quot;, &quot;Washington&quot;));    personList.add(new Person(&quot;Anni&quot;, 8200, 24, &quot;female&quot;, &quot;New York&quot;));        Map&lt;?, Person&gt; map = personList.stream().filter(p -&gt; p.getSalary() &gt; 8000)            .collect(Collectors.toMap(Person::getName, p -&gt; p));    System.out.println(&quot;toList:&quot; + listNew);    System.out.println(&quot;toSet:&quot; + set);    System.out.println(&quot;toMap:&quot; + map);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>输出结果</p><p>4.6.2 统计（count、averaging）<br>Collectors提供了一系列用于数据统计的静态方法：</p><p>计数：count<br>平均值：averagingInt、averagingLong、averagingDouble<br>最值：maxBy、minBy<br>求和：summingInt、summingLong、summingDouble<br>统计以上所有：summarizingInt、summarizingLong、summarizingDouble<br>案例：统计员工人数、平均工资、工资总额、最高工资。</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Person> personList &#x3D; new ArrayList<Person>();<br>        personList.add(new Person(“Tom”, 8900, 23, “male”, “New York”));<br>        personList.add(new Person(“Jack”, 7000, 25, “male”, “Washington”));<br>        personList.add(new Person(“Lily”, 7800, 21, “female”, “Washington”));</p><pre><code>    // 求总数    Long count = personList.stream().collect(Collectors.counting());    // 求平均工资    Double average = personList.stream().collect(Collectors.averagingDouble(Person::getSalary));    // 求最高工资    Optional&lt;Integer&gt; max = personList.stream().map(Person::getSalary).collect(Collectors.maxBy(Integer::compare));    // 求工资之和    Integer sum = personList.stream().collect(Collectors.summingInt(Person::getSalary));    // 一次性统计所有信息    DoubleSummaryStatistics collect = personList.stream().collect(Collectors.summarizingDouble(Person::getSalary));    System.out.println(&quot;员工总数：&quot; + count);    System.out.println(&quot;员工平均工资：&quot; + average);    System.out.println(&quot;员工工资总和：&quot; + sum);    System.out.println(&quot;员工工资所有统计：&quot; + collect);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>输出结果：</p><p>4.6.3 分组（partitioningBy、groupingBy）<br>分区：将stream按条件分为两个Map，比如员工按薪资是否高于8000分为两部分。</p><p>分组：将集合分为多个Map，比如员工按性别分组。有单级分组和多级分组。</p><p>partitioningBy</p><p>public static <T><br>   Collector&lt;T, ?, Map&lt;Boolean, List<T>&gt;&gt; partitioningBy(Predicate&lt;? super T&gt; predicate) {<br>       return partitioningBy(predicate, toList());<br>   }</p><p>1<br>2<br>3<br>4<br>5<br>groupingBy</p><p>public static &lt;T, K&gt; Collector&lt;T, ?, Map&lt;K, List<T>&gt;&gt;<br>   groupingBy(Function&lt;? super T, ? extends K&gt; classifier) {<br>       return groupingBy(classifier, toList());<br>   }<br>1<br>2<br>3<br>4<br>案例：将员工按薪资是否高于8000分为两部分；将员工按性别和地区分组**</p><p>public class StreamTest {<br>public static void main(String[] args) {<br>    List<Person> personList &#x3D; new ArrayList<Person>();<br>    personList.add(new Person(“Tom”, 8900, “male”, “New York”));<br>    personList.add(new Person(“Jack”, 7000, “male”, “Washington”));<br>    personList.add(new Person(“Lily”, 7800, “female”, “Washington”));<br>    personList.add(new Person(“Anni”, 8200, “female”, “New York”));<br>    personList.add(new Person(“Owen”, 9500, “male”, “New York”));<br>    personList.add(new Person(“Alisa”, 7900, “female”, “New York”));</p><pre><code>// 将员工按薪资是否高于8000分组   Map&lt;Boolean, List&lt;Person&gt;&gt; part = personList.stream().collect(Collectors.partitioningBy(x -&gt; x.getSalary() &gt; 8000));   // 将员工按性别分组   Map&lt;String, List&lt;Person&gt;&gt; group = personList.stream().collect(Collectors.groupingBy(Person::getSex));   // 将员工先按性别分组，再按地区分组   Map&lt;String, Map&lt;String, List&lt;Person&gt;&gt;&gt; group2 = personList.stream().collect(Collectors.groupingBy(Person::getSex, Collectors.groupingBy(Person::getArea)));   System.out.println(&quot;员工按薪资是否大于8000分组情况：&quot; + part);   System.out.println(&quot;员工按性别分组情况：&quot; + group);   System.out.println(&quot;员工按性别、地区：&quot; + group2);</code></pre><p>}<br>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>输出结果：</p><p>4.6.4 接合（joining）<br>joining可以将stream中的元素用特定的连接符（没有的话，则直接连接）连接成一个字符串。</p><p>joining</p><p>public static Collector&lt;CharSequence, ?, String&gt; joining(CharSequence delimiter) {<br>       return joining(delimiter, “”, “”);<br>   }<br>1<br>2<br>3<br>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Person> personList &#x3D; new ArrayList<Person>();<br>        personList.add(new Person(“Tom”, 8900, 23, “male”, “New York”));<br>        personList.add(new Person(“Jack”, 7000, 25, “male”, “Washington”));<br>        personList.add(new Person(“Lily”, 7800, 21, “female”, “Washington”));</p><pre><code>    String names = personList.stream().map(p -&gt; p.getName()).collect(Collectors.joining(&quot;,&quot;));    System.out.println(&quot;所有员工的姓名：&quot; + names);    List&lt;String&gt; list = Arrays.asList(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;);    String string = list.stream().collect(Collectors.joining(&quot;-&quot;));    System.out.println(&quot;拼接后的字符串：&quot; + string);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>输出结果：</p><p>4.6.5 规约（reducing）<br>Collectors类提供的reducing方法，相比于stream本身的reduce方法，增加了对自定义归约的支持。</p><p>reducing</p><p>public static <T> Collector&lt;T, ?, Optional<T>&gt;<br>   reducing(BinaryOperator<T> op) {<br>       class OptionalBox implements Consumer<T> {<br>           T value &#x3D; null;<br>           boolean present &#x3D; false;</p><pre><code>       @Override       public void accept(T t) &#123;           if (present) &#123;               value = op.apply(value, t);           &#125;           else &#123;               value = t;               present = true;           &#125;       &#125;   &#125;   return new CollectorImpl&lt;T, OptionalBox, Optional&lt;T&gt;&gt;(           OptionalBox::new, OptionalBox::accept,           (a, b) -&gt; &#123; if (b.present) a.accept(b.value); return a; &#125;,           a -&gt; Optional.ofNullable(a.value), CH_NOID);</code></pre><p>   }</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Person> personList &#x3D; new ArrayList<Person>();<br>        personList.add(new Person(“Tom”, 8900, 23, “male”, “New York”));<br>        personList.add(new Person(“Jack”, 7000, 25, “male”, “Washington”));<br>        personList.add(new Person(“Lily”, 7800, 21, “female”, “Washington”));</p><pre><code>    // 每个员工减去起征点后的薪资之和（这个例子并不严谨，但一时没想到好的例子）    Integer sum = personList.stream().collect(Collectors.reducing(0, Person::getSalary, (i, j) -&gt; (i + j - 5000)));    System.out.println(&quot;员工扣税薪资总和：&quot; + sum);    // stream的reduce    Optional&lt;Integer&gt; sum2 = personList.stream().map(Person::getSalary).reduce(Integer::sum);    System.out.println(&quot;员工薪资总和：&quot; + sum2.get());&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>输出结果：</p><p>4.7 排序（sorted）<br>sorted，中间操作。有两种排序：</p><p>sorted()：自然排序，流中元素需实现Comparable接口<br>sorted(Comparator com)：Comparator排序器自定义排序<br>sorted</p><p>   Stream<T> sorted();</p><p>   @Override<br>   public final Stream<P_OUT> sorted() {<br>       return SortedOps.makeRef(this);<br>   }<br>1<br>2<br>3<br>4<br>5<br>6<br>sorted(Comparator com)</p><pre><code>Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);@Override</code></pre><p>   public final Stream<P_OUT> sorted(Comparator&lt;? super P_OUT&gt; comparator) {<br>       return SortedOps.makeRef(this, comparator);<br>   }<br>1<br>2<br>3<br>4<br>5<br>6<br>案例：将员工按工资由高到低（工资一样则按年龄由大到小）排序</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        List<Person> personList &#x3D; new ArrayList<Person>();</p><pre><code>    personList.add(new Person(&quot;Sherry&quot;, 9000, 24, &quot;female&quot;, &quot;New York&quot;));    personList.add(new Person(&quot;Tom&quot;, 8900, 22, &quot;male&quot;, &quot;Washington&quot;));    personList.add(new Person(&quot;Jack&quot;, 9000, 25, &quot;male&quot;, &quot;Washington&quot;));    personList.add(new Person(&quot;Lily&quot;, 8800, 26, &quot;male&quot;, &quot;New York&quot;));    personList.add(new Person(&quot;Alisa&quot;, 9000, 26, &quot;female&quot;, &quot;New York&quot;));    // 按工资升序排序（自然排序）    List&lt;String&gt; newList = personList.stream().sorted(Comparator.comparing(Person::getSalary)).map(Person::getName)            .collect(Collectors.toList());    // 按工资倒序排序    List&lt;String&gt; newList2 = personList.stream().sorted(Comparator.comparing(Person::getSalary).reversed())            .map(Person::getName).collect(Collectors.toList());    // 先按工资再按年龄升序排序    List&lt;String&gt; newList3 = personList.stream()            .sorted(Comparator.comparing(Person::getSalary).thenComparing(Person::getAge)).map(Person::getName)            .collect(Collectors.toList());    // 先按工资再按年龄自定义排序（降序）    List&lt;String&gt; newList4 = personList.stream().sorted((p1, p2) -&gt; &#123;        if (p1.getSalary() == p2.getSalary()) &#123;            return p2.getAge() - p1.getAge();        &#125; else &#123;            return p2.getSalary() - p1.getSalary();        &#125;    &#125;).map(Person::getName).collect(Collectors.toList());    System.out.println(&quot;按工资升序排序：&quot; + newList);    System.out.println(&quot;按工资降序排序：&quot; + newList2);    System.out.println(&quot;先按工资再按年龄升序排序：&quot; + newList3);    System.out.println(&quot;先按工资再按年龄自定义降序排序：&quot; + newList4);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>输出结果：</p><p>4.8 去重、合并（distinct、skip、limit）<br>流也可以进行合并、去重、限制、跳过等操作。</p><p>distinct（去重）</p><p>Stream<T> distinct();</p><p>@Override<br>   public final Stream<P_OUT> distinct() {<br>       return DistinctOps.makeRef(this);<br>   }<br>1<br>2<br>3<br>4<br>5<br>6<br>skip(跳过)</p><p>Stream<T> skip(long n);</p><p>@Override<br>   public final Stream<P_OUT> skip(long n) {<br>       if (n &lt; 0)<br>           throw new IllegalArgumentException(Long.toString(n));<br>       if (n &#x3D;&#x3D; 0)<br>           return this;<br>       else<br>           return SliceOps.makeRef(this, n, -1);<br>   }<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>limit</p><p>Stream<T> limit(long maxSize);</p><p> @Override<br>   public final Stream<P_OUT> limit(long maxSize) {<br>       if (maxSize &lt; 0)<br>           throw new IllegalArgumentException(Long.toString(maxSize));<br>       return SliceOps.makeRef(this, 0, maxSize);<br>   }</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9</p><p>public class StreamTest {<br>    public static void main(String[] args) {<br>        String[] arr1 &#x3D; { “a”, “b”, “c”, “d” };<br>        String[] arr2 &#x3D; { “d”, “e”, “f”, “g” };</p><pre><code>    Stream&lt;String&gt; stream1 = Stream.of(arr1);    Stream&lt;String&gt; stream2 = Stream.of(arr2);    // concat:合并两个流 distinct：去重    List&lt;String&gt; newList = Stream.concat(stream1, stream2).distinct().collect(Collectors.toList());    // limit：限制从流中获得前n个数据    List&lt;Integer&gt; collect = Stream.iterate(1, x -&gt; x + 2).limit(10).collect(Collectors.toList());    // skip：跳过前n个数据  这里的1代表把1代入后边的计算表达式    List&lt;Integer&gt; collect2 = Stream.iterate(1, x -&gt; x + 2).skip(1).limit(5).collect(Collectors.toList());    System.out.println(&quot;流合并：&quot; + newList);    System.out.println(&quot;limit：&quot; + collect);    System.out.println(&quot;skip：&quot; + collect2);&#125;</code></pre><p>}</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>运行结果：</p><p>————————————————</p><pre><code>                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</code></pre><p>原文链接：<a href="https://blog.csdn.net/qq_43410878/article/details/123716629">https://blog.csdn.net/qq_43410878/article/details/123716629</a></p>]]></content>
      
      
      <categories>
          
          <category> Lambda表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装Docker</title>
      <link href="/posts/29c15ce3.html"/>
      <url>/posts/29c15ce3.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic.imgdb.cn/item/64c0ad651ddac507cc99ceb7.jpg" alt="docker"></p><h1 id="1-卸载旧版"><a href="#1-卸载旧版" class="headerlink" title="1.卸载旧版"></a>1.卸载旧版</h1><p>首先如果系统中已存在旧的 <strong>Docker</strong> ，则先卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine \</span><br><span class="line">    docker-selinux </span><br></pre></td></tr></table></figure><h1 id="2-配置-Docker-的-yum-库"><a href="#2-配置-Docker-的-yum-库" class="headerlink" title="2.配置 Docker 的 yum 库"></a>2.配置 Docker 的 yum 库</h1><p>首先要安装一个 <strong>yum</strong> 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>安装成功后，执行命令，配置 <strong>Docker</strong> 的 <strong>yum</strong> 源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><p>更新 <strong>yum</strong> 建立缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum makecache fast</span><br></pre></td></tr></table></figure><h1 id="3-安装-Docker"><a href="#3-安装-Docker" class="headerlink" title="3.安装 Docker"></a>3.安装 Docker</h1><p>执行命令，安装 <strong>Docker</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h1 id="4-启动和校验"><a href="#4-启动和校验" class="headerlink" title="4.启动和校验"></a>4.启动和校验</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h1 id="5-配置镜像加速"><a href="#5-配置镜像加速" class="headerlink" title="5.配置镜像加速"></a>5.配置镜像加速</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制内容，注意把其中的镜像加速地址改成你自己的</span></span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://mirrors.sohu.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://ccr.ccs.tencentyun.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.awsl9527.cn&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启Docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
